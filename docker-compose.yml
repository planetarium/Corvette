version: '3.8'
services:
  observer:
    depends_on:
      message-queue-broker:
        condition: service_healthy
    image: "ghcr.io/planetarium/corvette-observer:${VERSION:-build-latest}"
    build:
      context: .
      target: observer
    container_name: observer
    environment:
      DATABASE_URL: postgres://postgres:V0uYcxk2dFixtPWfK4Nb@db/postgres
      AMQP_BROKER_URL: amqp://message-queue-broker
      CHAIN_DEFINITION_URL: https://esm.sh/@wagmi/chains@1.6.0#goerli
      BLOCK_FINALITY: safe
  emitter:
    depends_on:
      message-queue-broker:
        condition: service_healthy
    image: "ghcr.io/planetarium/corvette-emitter:${VERSION:-build-latest}"
    build:
      context: .
      target: emitter
    container_name: emitter
    environment:
      DATABASE_URL: postgres://postgres:V0uYcxk2dFixtPWfK4Nb@db/postgres
      AMQP_BROKER_URL: amqp://message-queue-broker
      CHAIN_DEFINITION_URL: https://esm.sh/@wagmi/chains@1.6.0#goerli
  api:
    depends_on:
      message-queue-broker:
        condition: service_healthy
    image: "ghcr.io/planetarium/corvette-api:${VERSION:-build-latest}"
    ports:
      - "8000:80/tcp"
    build:
      context: .
      target: api
    container_name: api
    environment:
      DATABASE_URL: postgres://postgres:V0uYcxk2dFixtPWfK4Nb@db/postgres
      AMQP_BROKER_URL: amqp://message-queue-broker
      API_URL: http://api:80
  web:
    depends_on:
      message-queue-broker:
        condition: service_healthy
      api:
        condition: service_started
    image: "ghcr.io/planetarium/corvette-web:${VERSION:-build-latest}"
    ports:
      - "3000:80/tcp"
    environment:
      DATABASE_URL: postgres://postgres:V0uYcxk2dFixtPWfK4Nb@db/postgres
      AMQP_BROKER_URL: amqp://message-queue-broker
      WEBUI_URL: http://web:80
    build:
      context: .
      target: web
      args:
        DENO_DEPLOYMENT_ID: "${VERSION}"
    container_name: web
  migrate-db:
    depends_on:
      db:
        condition: service_healthy
    build:
      context: .
      target: common
    environment:
      DATABASE_URL: postgres://postgres:V0uYcxk2dFixtPWfK4Nb@db/postgres
    command: sh -c 'deno task prisma migrate diff --from-schema-datasource prisma/prisma/schema.prisma --to-schema-datamodel prisma/prisma/schema.prisma --script > migrate.sql && deno task prisma db execute --file ./migrate.sql --schema prisma/prisma/schema.prisma'
  message-queue-broker:
    image: rabbitmq:3.12.2-alpine
    restart: always
    container_name: message-queue-broker
    hostname: message-queue-broker
    volumes:
      - ./docker-compose-data/mq:/var/lib/rabbitmq
    healthcheck:
      timeout: 5s
      interval: 5s
      retries: 5
      test:
        - "CMD"
        - "rabbitmqctl"
        - "status"
  db:
    image: postgres:15.3-alpine3.18
    command: ["postgres", "-c", "log_min_messages=fatal"]
    restart: always
    container_name: db
    environment:
      POSTGRES_PASSWORD: "V0uYcxk2dFixtPWfK4Nb"
    volumes:
      - ./docker-compose-data/db:/var/lib/postgresql/data/
    healthcheck:
      timeout: 5s
      interval: 5s
      retries: 5
      test:
        - "CMD-SHELL"
        - "pg_isready --dbname=postgres --host=localhost --username=postgres"
