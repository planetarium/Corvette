// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider  = "sqlite"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Event {
  blockTimestamp DateTime
  observedAt     DateTime    @default(now())
  txIndex        Int
  logIndex       Int
  blockNumber    Int
  blockHash      Bytes
  txHash         Bytes
  Source         EventSource @relation(fields: [sourceAddress, abiHash], references: [address, abiHash])
  Abi            EventAbi    @relation(fields: [abiHash], references: [hash])
  topic1         Bytes?
  topic2         Bytes?
  topic3         Bytes?
  data           Bytes

  abiHash       Bytes
  sourceAddress Bytes

  @@id([blockTimestamp, txIndex, logIndex])
}

model EventAbi {
  hash Bytes  @id
  json String

  Event       Event[]
  EventSource EventSource[]
  Permission  Permission[]
}

model EventSource {
  address Bytes
  abiHash Bytes

  Abi             EventAbi          @relation(fields: [abiHash], references: [hash])
  Event           Event[]
  EmitDestination EmitDestination[]
  Permission      Permission[]

  @@id([address, abiHash])
}

model EmitDestination {
  id            Int    @id @default(autoincrement())
  sourceAddress Bytes
  abiHash       Bytes
  webhookUrl    String
  topic1        Bytes?
  topic2        Bytes?
  topic3        Bytes?

  Source     EventSource  @relation(fields: [sourceAddress, abiHash], references: [address, abiHash])
  Permission Permission[]

  @@unique([sourceAddress, abiHash, webhookUrl, topic1, topic2, topic3])
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  Permission Permission[]
}

model Permission {
  id     Int @id @default(autoincrement())
  userId Int

  // SQLite doesn't support ENUM
  type String // EventAbi, EventSource, EmitDestination

  abiHash       Bytes?
  sourceAddress Bytes?
  destinationId Int?

  User        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Abi         EventAbi?        @relation(fields: [abiHash], references: [hash], onDelete: Cascade)
  Source      EventSource?     @relation(fields: [abiHash, sourceAddress], references: [abiHash, address], onDelete: Cascade)
  Destination EmitDestination? @relation(fields: [destinationId], references: [id], onDelete: Cascade)
}

model SharedState {
  key   String @id
  value String
}
